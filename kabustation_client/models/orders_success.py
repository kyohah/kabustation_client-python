# coding: utf-8

"""
    kabuステーションAPI

    # 定義情報   REST APIのコード一覧、エンドポイントは下記リンク参照     - [REST APIコード一覧](../ptal/error.html)

    The version of the OpenAPI document: 1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from kabustation_client.models.orders_success_details_inner import OrdersSuccessDetailsInner
from typing import Optional, Set
from typing_extensions import Self

class OrdersSuccess(BaseModel):
    """
    OrdersSuccess
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="注文番号", alias="ID")
    state: Optional[StrictInt] = Field(default=None, description="状態<br> ※OrderStateと同一である <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>待機（発注待機）</td>       </tr>       <tr>           <td>2</td>           <td>処理中（発注送信中）</td>       </tr>       <tr>           <td>3</td>           <td>処理済（発注済・訂正済）</td>       </tr>       <tr>           <td>4</td>           <td>訂正取消送信中</td>       </tr>       <tr>           <td>5</td>           <td>終了（発注エラー・取消済・全約定・失効・期限切れ）</td>       </tr>   </tbody> </table>", alias="State")
    order_state: Optional[StrictInt] = Field(default=None, description="注文状態<br> ※Stateと同一である <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>待機（発注待機）</td>       </tr>       <tr>           <td>2</td>           <td>処理中（発注送信中）</td>       </tr>       <tr>           <td>3</td>           <td>処理済（発注済・訂正済）</td>       </tr>       <tr>           <td>4</td>           <td>訂正取消送信中</td>       </tr>       <tr>           <td>5</td>           <td>終了（発注エラー・取消済・全約定・失効・期限切れ）</td>       </tr>   </tbody> </table>", alias="OrderState")
    ord_type: Optional[StrictInt] = Field(default=None, description="執行条件 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>ザラバ</td>       </tr>       <tr>           <td>2</td>           <td>寄り</td>       </tr>       <tr>           <td>3</td>           <td>引け</td>       </tr>       <tr>           <td>4</td>           <td>不成</td>       </tr>       <tr>           <td>5</td>           <td>対当指値</td>       </tr>       <tr>           <td>6</td>           <td>IOC</td>       </tr>   </tbody> </table>", alias="OrdType")
    recv_time: Optional[StrictStr] = Field(default=None, description="受注日時", alias="RecvTime")
    symbol: Optional[StrictStr] = Field(default=None, description="銘柄コード", alias="Symbol")
    symbol_name: Optional[StrictStr] = Field(default=None, description="銘柄名", alias="SymbolName")
    exchange: Optional[StrictInt] = Field(default=None, description="市場コード <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>東証</td>       </tr>       <tr>           <td>3</td>           <td>名証</td>       </tr>       <tr>           <td>5</td>           <td>福証</td>       </tr>       <tr>           <td>6</td>           <td>札証</td>       </tr>       <tr>           <td>9</td>           <td>SOR</td>       </tr>       <tr>           <td>2</td>           <td>日通し</td>       </tr>       <tr>           <td>23</td>           <td>日中</td>       </tr>       <tr>           <td>24</td>           <td>夜間</td>       </tr>   </tbody> </table>", alias="Exchange")
    exchange_name: Optional[StrictStr] = Field(default=None, description="市場名", alias="ExchangeName")
    time_in_force: Optional[StrictInt] = Field(default=None, description="有効期間条件<br>※先物・オプション銘柄の場合のみ <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>FAS</td>       </tr>       <tr>           <td>2</td>           <td>FAK</td>       </tr>       <tr>           <td>3</td>           <td>FOK</td>       </tr>   </tbody> </table>", alias="TimeInForce")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="値段", alias="Price")
    order_qty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="発注数量<br> ※注文期限切れと失効の場合、OrderQtyはゼロになりません。<br> ※期限切れと失効の確認方法としては、DetailsのRecType（3: 期限切れ、7: 失効）にてご確認ください。", alias="OrderQty")
    cum_qty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="約定数量", alias="CumQty")
    side: Optional[StrictStr] = Field(default=None, description="売買区分 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>売</td>       </tr>       <tr>           <td>2</td>           <td>買</td>       </tr>   </tbody> </table>", alias="Side")
    cash_margin: Optional[StrictInt] = Field(default=None, description="取引区分 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>2</td>           <td>新規</td>       </tr>       <tr>           <td>3</td>           <td>返済</td>       </tr>   </tbody> </table>", alias="CashMargin")
    account_type: Optional[StrictInt] = Field(default=None, description="口座種別 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>2</td>           <td>一般</td>       </tr>       <tr>           <td>4</td>           <td>特定</td>       </tr>       <tr>           <td>12</td>           <td>法人</td>       </tr>   </tbody> </table>", alias="AccountType")
    deliv_type: Optional[StrictInt] = Field(default=None, description="受渡区分 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>2</td>           <td>お預り金</td>       </tr>       <tr>           <td>3</td>           <td>auマネーコネクト</td>       </tr>   </tbody> </table>", alias="DelivType")
    expire_day: Optional[StrictInt] = Field(default=None, description="注文有効期限<br>yyyyMMdd形式", alias="ExpireDay")
    margin_trade_type: Optional[StrictInt] = Field(default=None, description="信用取引区分<br> ※信用を注文した際に表示されます。 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>制度信用</td>       </tr>       <tr>           <td>2</td>           <td>一般信用（長期）</td>       </tr>       <tr>           <td>3</td>           <td>一般信用（デイトレ）</td>       </tr>   </tbody> </table>", alias="MarginTradeType")
    margin_premium: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="プレミアム料<br> ※（注文中数量＋約定済数量）×１株あたりプレミアム料として計算されます。<br> ※信用を注文した際に表示されます。<br> ※制度信用売/買、一般（長期）買、一般（デイトレ）買の場合は、Noneと返されます。<br> 一般（長期）売、一般（デイトレ）売の場合は、プレミアム料=0の場合、0（ゼロ）と返されます。", alias="MarginPremium")
    details: Optional[List[OrdersSuccessDetailsInner]] = Field(default=None, description="注文詳細", alias="Details")
    __properties: ClassVar[List[str]] = ["ID", "State", "OrderState", "OrdType", "RecvTime", "Symbol", "SymbolName", "Exchange", "ExchangeName", "TimeInForce", "Price", "OrderQty", "CumQty", "Side", "CashMargin", "AccountType", "DelivType", "ExpireDay", "MarginTradeType", "MarginPremium", "Details"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrdersSuccess from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in details (list)
        _items = []
        if self.details:
            for _item in self.details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Details'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrdersSuccess from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ID": obj.get("ID"),
            "State": obj.get("State"),
            "OrderState": obj.get("OrderState"),
            "OrdType": obj.get("OrdType"),
            "RecvTime": obj.get("RecvTime"),
            "Symbol": obj.get("Symbol"),
            "SymbolName": obj.get("SymbolName"),
            "Exchange": obj.get("Exchange"),
            "ExchangeName": obj.get("ExchangeName"),
            "TimeInForce": obj.get("TimeInForce"),
            "Price": obj.get("Price"),
            "OrderQty": obj.get("OrderQty"),
            "CumQty": obj.get("CumQty"),
            "Side": obj.get("Side"),
            "CashMargin": obj.get("CashMargin"),
            "AccountType": obj.get("AccountType"),
            "DelivType": obj.get("DelivType"),
            "ExpireDay": obj.get("ExpireDay"),
            "MarginTradeType": obj.get("MarginTradeType"),
            "MarginPremium": obj.get("MarginPremium"),
            "Details": [OrdersSuccessDetailsInner.from_dict(_item) for _item in obj["Details"]] if obj.get("Details") is not None else None
        })
        return _obj


