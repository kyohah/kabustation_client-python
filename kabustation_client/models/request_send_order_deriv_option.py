# coding: utf-8

"""
    kabuステーションAPI

    # 定義情報   REST APIのコード一覧、エンドポイントは下記リンク参照     - [REST APIコード一覧](../ptal/error.html)

    The version of the OpenAPI document: 1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from kabustation_client.models.positions_deriv import PositionsDeriv
from kabustation_client.models.request_send_order_deriv_future_reverse_limit_order import RequestSendOrderDerivFutureReverseLimitOrder
from typing import Optional, Set
from typing_extensions import Self

class RequestSendOrderDerivOption(BaseModel):
    """
    RequestSendOrderDerivOption
    """ # noqa: E501
    password: StrictStr = Field(description="注文パスワード", alias="Password")
    symbol: StrictStr = Field(description="銘柄コード<br>※取引最終日に「オプション銘柄コード取得」でDerivMonthに0（直近限月）を指定した場合、日中・夜間の時間帯に関わらず、取引最終日を迎える限月の銘柄コードを返します。取引最終日を迎える銘柄の取引は日中取引をもって終了となりますので、ご注意ください。", alias="Symbol")
    exchange: StrictInt = Field(description="市場コード <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>2</td>           <td>日通し</td>       </tr>       <tr>           <td>23</td>           <td>日中</td>       </tr>       <tr>           <td>24</td>           <td>夜間</td>       </tr>   </tbody> </table>", alias="Exchange")
    trade_type: StrictInt = Field(description="取引区分 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>新規</td>       </tr>       <tr>           <td>2</td>           <td>返済</td>       </tr>   </tbody> </table>", alias="TradeType")
    time_in_force: StrictInt = Field(description="有効期間条件 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>FAS</td>       </tr>       <tr>           <td>2</td>           <td>FAK</td>       </tr>       <tr>           <td>3</td>           <td>FOK</td>       </tr>   </tbody> </table>  ※執行条件(FrontOrderType)、有効期限条件(TimeInForce)、市場コード(Exchange)で選択できる組み合わせは下表のようになります。               <table>   <thead>     <tr>       <th rowspan=\"2\">執行条件</th>       <th rowspan=\"2\">有効期間条件</th>       <th colspan=\"3\">市場コード</th>     </tr>     <tr>       <th>日中</th>       <th>夜間</th>       <th>日通し</th>     </tr>   </thead>      <tbody>     <tr>       <td>指値</td>       <td>FAS</td>       <td>●</td>       <td>●</td>       <td>●</td>     </tr>     <tr>       <td>指値</td>       <td>FAK</td>       <td>●</td>       <td>●</td>       <td>-</td>     </tr>     <tr>       <td>指値</td>       <td>FOK</td>       <td>●</td>       <td>●</td>       <td>-</td>     </tr>     <tr>       <td>成行</td>       <td>FAK</td>       <td>●</td>       <td>●</td>       <td>-</td>     </tr>     <tr>       <td>成行</td>       <td>FOK</td>       <td>●</td>       <td>●</td>       <td>-</td>     </tr>     <tr>       <td>逆指値（指値）</td>       <td>FAK</td>       <td>●</td>       <td>●</td>       <td>●</td>     </tr>     <tr>       <td>逆指値（成行）</td>       <td>FAK</td>       <td>●</td>       <td>●</td>       <td>-</td>     </tr>     <tr>       <td>引成</td>       <td>FAK</td>       <td>●</td>       <td>●</td>       <td>-</td>     </tr>     <tr>       <td>引指</td>       <td>FAS</td>       <td>●</td>       <td>●</td>       <td>-</td>     </tr>   </tbody> </table>", alias="TimeInForce")
    side: StrictStr = Field(description="売買区分 <table>   <thead>     <tr>       <th>定義値</th>       <th>説明</th>     </tr>   </thead>   <tbody>     <tr>       <td>1</td>       <td>売</td>     </tr>     <tr>       <td>2</td>       <td>買</td>     </tr>   </tbody> </table>", alias="Side")
    qty: StrictInt = Field(description="注文数量", alias="Qty")
    close_position_order: Optional[StrictInt] = Field(default=None, description="決済順序<br>※ClosePositionOrderとClosePositionsはどちらか一方のみ指定可能。<br>※ClosePositionOrderとClosePositionsを両方指定した場合、エラー。 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>0</td>           <td>日付（古い順）、損益（高い順）</td>       </tr>       <tr>           <td>1</td>           <td>日付（古い順）、損益（低い順）</td>       </tr>       <tr>           <td>2</td>           <td>日付（新しい順）、損益（高い順）</td>       </tr>       <tr>           <td>3</td>           <td>日付（新しい順）、損益（低い順）</td>       </tr>       <tr>           <td>4</td>           <td>損益（高い順）、日付（古い順）</td>       </tr>       <tr>           <td>5</td>           <td>損益（高い順）、日付（新しい順）</td>       </tr>       <tr>           <td>6</td>           <td>損益（低い順）、日付（古い順）</td>       </tr>       <tr>           <td>7</td>           <td>損益（低い順）、日付（新しい順）</td>       </tr>   </tbody> </table>", alias="ClosePositionOrder")
    close_positions: Optional[List[PositionsDeriv]] = Field(default=None, description="返済建玉指定<br>※ClosePositionOrderとClosePositionsはどちらか一方のみ指定可能。<br>※ClosePositionOrderとClosePositionsを両方指定した場合、エラー。", alias="ClosePositions")
    front_order_type: StrictInt = Field(description="執行条件 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>           <th>”Price”の指定</th>       </tr>   </thead>   <tbody>       <tr>           <td>18</td>           <td>引成（派生）<br>※TimeInForceは、「FAK」のみ有効</td>           <td>0</td>       </tr>       <tr>           <td>20</td>           <td>指値</td>           <td>発注したい金額</td>       </tr>       <tr>           <td>28</td>           <td>引指（派生）<br>※TimeInForceは、「FAS」のみ有効</td>           <td>発注したい金額</td>       </tr>       <tr>           <td>30</td>           <td>逆指値</td>           <td>指定なし<br>※AfterHitPriceで指定ください</td>       </tr>       <tr>           <td>120</td>           <td>成行（マーケットオーダー）</td>           <td>0</td>       </tr>   </tbody> </table>", alias="FrontOrderType")
    price: Union[StrictFloat, StrictInt] = Field(description="注文価格<br>※FrontOrderTypeで成行を指定した場合、0を指定する。<br>※詳細について、”FrontOrderType”をご確認ください。", alias="Price")
    expire_day: StrictInt = Field(description="注文有効期限<br> yyyyMMdd形式。<br> 「0」を指定すると、kabuステーション上の発注画面の「本日」に対応する日付として扱います。<br> 「本日」は直近の注文可能日となり、以下のように設定されます。<br> その市場の引けまでの間 : 当日<br> その市場の引け後       : 翌取引所営業日<br> その市場の休前日       : 休日明けの取引所営業日<br> ※ 日替わりはkabuステーションが日付変更通知を受信したタイミングです。<br> ※ 日通しの場合、夜間取引の引け後に日付が更新されます。", alias="ExpireDay")
    reverse_limit_order: Optional[RequestSendOrderDerivFutureReverseLimitOrder] = Field(default=None, alias="ReverseLimitOrder")
    __properties: ClassVar[List[str]] = ["Password", "Symbol", "Exchange", "TradeType", "TimeInForce", "Side", "Qty", "ClosePositionOrder", "ClosePositions", "FrontOrderType", "Price", "ExpireDay", "ReverseLimitOrder"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RequestSendOrderDerivOption from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in close_positions (list)
        _items = []
        if self.close_positions:
            for _item in self.close_positions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ClosePositions'] = _items
        # override the default output from pydantic by calling `to_dict()` of reverse_limit_order
        if self.reverse_limit_order:
            _dict['ReverseLimitOrder'] = self.reverse_limit_order.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RequestSendOrderDerivOption from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Password": obj.get("Password"),
            "Symbol": obj.get("Symbol"),
            "Exchange": obj.get("Exchange"),
            "TradeType": obj.get("TradeType"),
            "TimeInForce": obj.get("TimeInForce"),
            "Side": obj.get("Side"),
            "Qty": obj.get("Qty"),
            "ClosePositionOrder": obj.get("ClosePositionOrder"),
            "ClosePositions": [PositionsDeriv.from_dict(_item) for _item in obj["ClosePositions"]] if obj.get("ClosePositions") is not None else None,
            "FrontOrderType": obj.get("FrontOrderType"),
            "Price": obj.get("Price"),
            "ExpireDay": obj.get("ExpireDay"),
            "ReverseLimitOrder": RequestSendOrderDerivFutureReverseLimitOrder.from_dict(obj["ReverseLimitOrder"]) if obj.get("ReverseLimitOrder") is not None else None
        })
        return _obj


