# coding: utf-8

"""
    kabuステーションAPI

    # 定義情報   REST APIのコード一覧、エンドポイントは下記リンク参照     - [REST APIコード一覧](../ptal/error.html)

    The version of the OpenAPI document: 1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class MarginPremiumResponseDayTrade(BaseModel):
    """
    一般信用（デイトレ）
    """ # noqa: E501
    margin_premium_type: Optional[StrictInt] = Field(default=None, description="プレミアム料入力区分 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>null</td>           <td>一般信用（デイトレ）非対応銘柄</td>       </tr>       <tr>           <td>0</td>           <td>プレミアム料がない銘柄</td>       </tr>       <tr>           <td>1</td>           <td>プレミアム料が固定の銘柄</td>       </tr>       <tr>           <td>2</td>           <td>プレミアム料が入札で決定する銘柄</td>       </tr>   </tbody> </table>", alias="MarginPremiumType")
    margin_premium: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="確定プレミアム料<br> ※入札銘柄の場合、入札受付中は随時更新します。受付時間外は、確定したプレミアム料を返します。<br> ※非入札銘柄の場合、常に固定値を返します。<br> ※信用取引不可の場合、nullを返します。<br> ※19:30~翌営業日のプレミアム料になります。", alias="MarginPremium")
    upper_margin_premium: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="上限プレミアム料<br> ※プレミアム料がない場合は、nullを返します。", alias="UpperMarginPremium")
    lower_margin_premium: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="下限プレミアム料<br> ※プレミアム料がない場合は、nullを返します。", alias="LowerMarginPremium")
    tick_margin_premium: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="プレミアム料刻値<br> ※入札可能銘柄以外は、nullを返します。", alias="TickMarginPremium")
    __properties: ClassVar[List[str]] = ["MarginPremiumType", "MarginPremium", "UpperMarginPremium", "LowerMarginPremium", "TickMarginPremium"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MarginPremiumResponseDayTrade from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MarginPremiumResponseDayTrade from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "MarginPremiumType": obj.get("MarginPremiumType"),
            "MarginPremium": obj.get("MarginPremium"),
            "UpperMarginPremium": obj.get("UpperMarginPremium"),
            "LowerMarginPremium": obj.get("LowerMarginPremium"),
            "TickMarginPremium": obj.get("TickMarginPremium")
        })
        return _obj


