# coding: utf-8

"""
    kabuステーションAPI

    # 定義情報   REST APIのコード一覧、エンドポイントは下記リンク参照     - [REST APIコード一覧](../ptal/error.html)

    The version of the OpenAPI document: 1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class OrdersSuccessDetailsInner(BaseModel):
    """
    OrdersSuccessDetailsInner
    """ # noqa: E501
    seq_num: Optional[StrictInt] = Field(default=None, description="※注文明細レコードの生成順序です。<br>※通番であるとは限りませんが、大小による順序は保たれています。", alias="SeqNum")
    id: Optional[StrictStr] = Field(default=None, description="注文詳細番号", alias="ID")
    rec_type: Optional[StrictInt] = Field(default=None, description="明細種別 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>受付</td>       </tr>       <tr>           <td>2</td>           <td>繰越</td>       </tr>       <tr>           <td>3</td>           <td>期限切れ</td>       </tr>       <tr>           <td>4</td>           <td>発注</td>       </tr>       <tr>           <td>5</td>           <td>訂正</td>       </tr>       <tr>           <td>6</td>           <td>取消</td>       </tr>       <tr>           <td>7</td>           <td>失効</td>       </tr>       <tr>           <td>8</td>           <td>約定</td>       </tr>   </tbody> </table>", alias="RecType")
    exchange_id: Optional[StrictStr] = Field(default=None, description="取引所番号", alias="ExchangeID")
    state: Optional[StrictInt] = Field(default=None, description="状態 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>待機（発注待機）</td>       </tr>       <tr>           <td>2</td>           <td>処理中（発注送信中・訂正送信中・取消送信中）</td>       </tr>       <tr>           <td>3</td>           <td>処理済（発注済・訂正済・取消済・全約定・期限切れ）</td>       </tr>       <tr>           <td>4</td>           <td>エラー</td>       </tr>       <tr>           <td>5</td>           <td>削除済み</td>       </tr>   </tbody> </table>", alias="State")
    transact_time: Optional[StrictStr] = Field(default=None, description="処理時刻", alias="TransactTime")
    ord_type: Optional[StrictInt] = Field(default=None, description="執行条件 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>null</td>           <td>RecType=[6] 取消 の場合</td>       </tr>       <tr>           <td>0</td>           <td>RecType=[3] 期限切れ, [7] 失効, [8] 約定 の場合</td>       </tr>       <tr>           <td>1</td>           <td>ザラバ</td>       </tr>       <tr>           <td>2</td>           <td>寄り</td>       </tr>       <tr>           <td>3</td>           <td>引け</td>       </tr>       <tr>           <td>4</td>           <td>不成</td>       </tr>       <tr>           <td>5</td>           <td>対当指値</td>       </tr>       <tr>           <td>6</td>           <td>IOC</td>       </tr>   </tbody> </table>", alias="OrdType")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="値段", alias="Price")
    qty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="数量", alias="Qty")
    execution_id: Optional[StrictStr] = Field(default=None, description="約定番号", alias="ExecutionID")
    execution_day: Optional[datetime] = Field(default=None, description="約定日時", alias="ExecutionDay")
    deliv_day: Optional[StrictInt] = Field(default=None, description="受渡日", alias="DelivDay")
    commission: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="手数料<br>※注文詳細の明細種別が約定（RecType=8)の場合に設定。", alias="Commission")
    commission_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="手数料消費税<br>※明細種別は約定（RecType=8）の場合にのみ表示されます。", alias="CommissionTax")
    __properties: ClassVar[List[str]] = ["SeqNum", "ID", "RecType", "ExchangeID", "State", "TransactTime", "OrdType", "Price", "Qty", "ExecutionID", "ExecutionDay", "DelivDay", "Commission", "CommissionTax"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrdersSuccessDetailsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrdersSuccessDetailsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "SeqNum": obj.get("SeqNum"),
            "ID": obj.get("ID"),
            "RecType": obj.get("RecType"),
            "ExchangeID": obj.get("ExchangeID"),
            "State": obj.get("State"),
            "TransactTime": obj.get("TransactTime"),
            "OrdType": obj.get("OrdType"),
            "Price": obj.get("Price"),
            "Qty": obj.get("Qty"),
            "ExecutionID": obj.get("ExecutionID"),
            "ExecutionDay": obj.get("ExecutionDay"),
            "DelivDay": obj.get("DelivDay"),
            "Commission": obj.get("Commission"),
            "CommissionTax": obj.get("CommissionTax")
        })
        return _obj


