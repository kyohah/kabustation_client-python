# coding: utf-8

"""
    kabuステーションAPI

    # 定義情報   REST APIのコード一覧、エンドポイントは下記リンク参照     - [REST APIコード一覧](../ptal/error.html)

    The version of the OpenAPI document: 1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RegulationsResponseRegulationsInfoInner(BaseModel):
    """
    RegulationsResponseRegulationsInfoInner
    """ # noqa: E501
    exchange: Optional[StrictInt] = Field(default=None, description="規制市場 <table>   <thead>     <tr>       <th>定義値</th>       <th>内容</th>     </tr>   </thead>   <tbody>     <tr>       <td>0</td>       <td>全対象</td>     </tr>     <tr>       <td>1</td>       <td>東証</td>     </tr>     <tr>       <td>3</td>       <td>名証</td>     </tr>     <tr>       <td>5</td>       <td>福証</td>     </tr>     <tr>       <td>6</td>       <td>札証</td>     </tr>     <tr>       <td>9</td>       <td>SOR</td>     </tr>     <tr>       <td>10</td>       <td>CXJ</td>     </tr>     <tr>       <td>21</td>       <td>JNX</td>     </tr>   </tbody> </table>", alias="Exchange")
    product: Optional[StrictInt] = Field(default=None, description="規制取引区分<br> ※空売り規制の場合、「4：新規」 <table>   <thead>     <tr>       <th>定義値</th>       <th>内容</th>     </tr>   </thead>   <tbody>     <tr>       <td>0</td>       <td>全対象</td>     </tr>     <tr>       <td>1</td>       <td>現物</td>     </tr>     <tr>       <td>2</td>       <td>信用新規（制度）</td>     </tr>     <tr>       <td>3</td>       <td>信用新規（一般）</td>     </tr>     <tr>       <td>4</td>       <td>新規</td>     </tr>     <tr>       <td>5</td>       <td>信用返済（制度）</td>     </tr>     <tr>       <td>6</td>       <td>信用返済（一般）</td>     </tr>     <tr>       <td>7</td>       <td>返済</td>     </tr>     <tr>       <td>8</td>       <td>品受</td>     </tr>     <tr>       <td>9</td>       <td>品渡</td>     </tr>   </tbody> </table>", alias="Product")
    side: Optional[StrictStr] = Field(default=None, description="規制売買<br> ※空売り規制の場合、「1：売」 <table>   <thead>     <tr>       <th>定義値</th>       <th>内容</th>     </tr>   </thead>   <tbody>     <tr>       <td>0</td>       <td>全対象</td>     </tr>     <tr>       <td>1</td>       <td>売</td>     </tr>     <tr>       <td>2</td>       <td>買</td>     </tr>   </tbody> </table>", alias="Side")
    reason: Optional[StrictStr] = Field(default=None, description="理由<br>※空売り規制の場合、「空売り規制」", alias="Reason")
    limit_start_day: Optional[StrictStr] = Field(default=None, description="制限開始日<br>yyyy/MM/dd HH:mm形式  <br>※空売り規制の場合、null", alias="LimitStartDay")
    limit_end_day: Optional[StrictStr] = Field(default=None, description="制限終了日<br>yyyy/MM/dd HH:mm形式  <br>※空売り規制の場合、null", alias="LimitEndDay")
    level: Optional[StrictInt] = Field(default=None, description="コンプライアンスレベル<br> ※空売り規制の場合、null <table>   <thead>     <tr>       <th>定義値</th>       <th>内容</th>     </tr>   </thead>   <tbody>     <tr>       <td>０</td>       <td>規制無し</td>     </tr>     <tr>       <td>１</td>       <td>ワーニング</td>     </tr>     <tr>       <td>２</td>       <td>エラー</td>     </tr>   </tbody> </table>", alias="Level")
    __properties: ClassVar[List[str]] = ["Exchange", "Product", "Side", "Reason", "LimitStartDay", "LimitEndDay", "Level"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RegulationsResponseRegulationsInfoInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RegulationsResponseRegulationsInfoInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Exchange": obj.get("Exchange"),
            "Product": obj.get("Product"),
            "Side": obj.get("Side"),
            "Reason": obj.get("Reason"),
            "LimitStartDay": obj.get("LimitStartDay"),
            "LimitEndDay": obj.get("LimitEndDay"),
            "Level": obj.get("Level")
        })
        return _obj


