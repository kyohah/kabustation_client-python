# coding: utf-8

"""
    kabuステーションAPI

    # 定義情報   REST APIのコード一覧、エンドポイントは下記リンク参照     - [REST APIコード一覧](../ptal/error.html)

    The version of the OpenAPI document: 1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class RankingByMarginResponseRankingInner(BaseModel):
    """
    RankingByMarginResponseRankingInner
    """ # noqa: E501
    var_false: Optional[StrictInt] = Field(default=None, description="順位<br>※ランキング内で同じ順位が返却される場合があります（10位が2件など）", alias="false")
    symbol: Optional[StrictStr] = Field(default=None, description="銘柄コード", alias="Symbol")
    symbol_name: Optional[StrictStr] = Field(default=None, description="銘柄名称", alias="SymbolName")
    sell_rapid_payment_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="売残（千株）", alias="SellRapidPaymentPercentage")
    sell_last_week_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="売残前週比", alias="SellLastWeekRatio")
    buy_rapid_payment_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="買残（千株）", alias="BuyRapidPaymentPercentage")
    buy_last_week_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="買残前週比", alias="BuyLastWeekRatio")
    ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="倍率", alias="Ratio")
    exchange_name: Optional[StrictStr] = Field(default=None, description="市場名", alias="ExchangeName")
    category_name: Optional[StrictStr] = Field(default=None, description="業種名", alias="CategoryName")
    __properties: ClassVar[List[str]] = ["false", "Symbol", "SymbolName", "SellRapidPaymentPercentage", "SellLastWeekRatio", "BuyRapidPaymentPercentage", "BuyLastWeekRatio", "Ratio", "ExchangeName", "CategoryName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RankingByMarginResponseRankingInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RankingByMarginResponseRankingInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "false": obj.get("false"),
            "Symbol": obj.get("Symbol"),
            "SymbolName": obj.get("SymbolName"),
            "SellRapidPaymentPercentage": obj.get("SellRapidPaymentPercentage"),
            "SellLastWeekRatio": obj.get("SellLastWeekRatio"),
            "BuyRapidPaymentPercentage": obj.get("BuyRapidPaymentPercentage"),
            "BuyLastWeekRatio": obj.get("BuyLastWeekRatio"),
            "Ratio": obj.get("Ratio"),
            "ExchangeName": obj.get("ExchangeName"),
            "CategoryName": obj.get("CategoryName")
        })
        return _obj


