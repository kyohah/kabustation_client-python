# coding: utf-8

"""
    kabuステーションAPI

    # 定義情報   REST APIのコード一覧、エンドポイントは下記リンク参照     - [REST APIコード一覧](../ptal/error.html)

    The version of the OpenAPI document: 1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class SymbolSuccess(BaseModel):
    """
    SymbolSuccess
    """ # noqa: E501
    symbol: Optional[StrictStr] = Field(default=None, description="銘柄コード", alias="Symbol")
    symbol_name: Optional[StrictStr] = Field(default=None, description="銘柄名", alias="SymbolName")
    display_name: Optional[StrictStr] = Field(default=None, description="銘柄略称<br>※株式・先物・オプション銘柄の場合のみ", alias="DisplayName")
    exchange: Optional[StrictInt] = Field(default=None, description="市場コード<br>※株式・先物・オプション銘柄の場合のみ <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>東証</td>       </tr>       <tr>           <td>3</td>           <td>名証</td>       </tr>       <tr>           <td>5</td>           <td>福証</td>       </tr>       <tr>           <td>6</td>           <td>札証</td>       </tr>       <tr>           <td>2</td>           <td>日通し</td>       </tr>       <tr>           <td>23</td>           <td>日中</td>       </tr>       <tr>           <td>24</td>           <td>夜間</td>       </tr>   </tbody> </table>", alias="Exchange")
    exchange_name: Optional[StrictStr] = Field(default=None, description="市場名称<br>※株式・先物・オプション銘柄の場合のみ", alias="ExchangeName")
    bis_category: Optional[StrictStr] = Field(default=None, description="業種コード名<br>※株式銘柄の場合のみ <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>0050</td>           <td>水産・農林業</td>       </tr>       <tr>           <td>1050</td>           <td>鉱業</td>       </tr>       <tr>           <td>2050</td>           <td>建設業</td>       </tr>       <tr>           <td>3050</td>           <td>食料品</td>       </tr>       <tr>           <td>3100</td>           <td>繊維製品</td>       </tr>       <tr>           <td>3150</td>           <td>パルプ・紙</td>       </tr>       <tr>           <td>3200</td>           <td>化学</td>       </tr>       <tr>           <td>3250</td>           <td>医薬品</td>       </tr>       <tr>           <td>3300</td>           <td>石油・石炭製品</td>       </tr>       <tr>           <td>3350</td>           <td>ゴム製品</td>       </tr>       <tr>           <td>3400</td>           <td>ガラス・土石製品</td>       </tr>       <tr>           <td>3450</td>           <td>鉄鋼</td>       </tr>       <tr>           <td>3500</td>           <td>非鉄金属</td>       </tr>       <tr>           <td>3550</td>           <td>金属製品</td>       </tr>       <tr>           <td>3600</td>           <td>機械</td>       </tr>       <tr>           <td>3650</td>           <td>電気機器</td>       </tr>       <tr>           <td>3700</td>           <td>輸送用機器</td>       </tr>       <tr>           <td>3750</td>           <td>精密機器</td>       </tr>       <tr>           <td>3800</td>           <td>その他製品</td>       </tr>       <tr>           <td>4050</td>           <td>電気・ガス業</td>       </tr>       <tr>           <td>5050</td>           <td>陸運業</td>       </tr>       <tr>           <td>5100</td>           <td>海運業</td>       </tr>       <tr>           <td>5150</td>           <td>空運業</td>       </tr>       <tr>           <td>5200</td>           <td>倉庫・運輸関連業</td>       </tr>       <tr>           <td>5250</td>           <td>情報・通信業</td>       </tr>       <tr>           <td>6050</td>           <td>卸売業</td>       </tr>       <tr>           <td>6100</td>           <td>小売業</td>       </tr>       <tr>           <td>7050</td>           <td>銀行業</td>       </tr>       <tr>           <td>7100</td>           <td>証券、商品先物取引業</td>       </tr>       <tr>           <td>7150</td>           <td>保険業</td>       </tr>       <tr>           <td>7200</td>           <td>その他金融業</td>       </tr>       <tr>           <td>8050</td>           <td>不動産業</td>       </tr>       <tr>           <td>9050</td>           <td>サービス業</td>       </tr>       <tr>           <td>9999</td>           <td>その他</td>       </tr>   </tbody> </table>", alias="BisCategory")
    total_market_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="時価総額<br>※株式銘柄の場合のみ<br>追加情報出力フラグ：falseの場合、null", alias="TotalMarketValue")
    total_stocks: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="発行済み株式数（千株）<br>※株式銘柄の場合のみ<br>追加情報出力フラグ：falseの場合、null", alias="TotalStocks")
    trading_unit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="売買単位<br>※株式・先物・オプション銘柄の場合のみ", alias="TradingUnit")
    fiscal_year_end_basic: Optional[StrictInt] = Field(default=None, description="決算期日<br>※株式銘柄の場合のみ<br>追加情報出力フラグ：falseの場合、null", alias="FiscalYearEndBasic")
    price_range_group: Optional[StrictStr] = Field(default=None, description="呼値グループ<br> ※株式・先物・オプション銘柄の場合のみ<br> ※各呼値コードが対応する商品は以下となります。<BR> 　株式の呼値の単位の詳細は [JPXページ](https://www.jpx.co.jp/equities/trading/domestic/07.html) をご覧ください。<BR> 　10000：株式(TOPIX500採用銘柄以外)　<br> 　10003：株式(TOPIX500採用銘柄)<br> 　10118 : 日経平均先物<br> 　10119 : 日経225mini<br> 　10318 : 日経平均オプション<br> 　10706 : ﾐﾆTOPIX先物<br> 　10718 : TOPIX先物<br> 　12122 : JPX日経400指数先物<br> 　14473 : NYダウ先物<br> 　14515 : 日経平均VI先物<br> 　15411 : グロース250先物<br> 　15569 : 東証REIT指数先物<br> 　17163 : TOPIXCore30指数先物<br> <table>   <thead>       <tr>           <th>呼値コード</th>           <th>値段の水準</th>           <th>呼値単位</th>       </tr>   </thead>   <tbody>       <tr>           <td>10000</td>           <td>3000円以下</td>           <td>1</td>       </tr>       <tr>           <td>10000</td>           <td>5000円以下</td>           <td>5</td>       </tr>       <tr>           <td>10000</td>           <td>30000円以下</td>           <td>10</td>       </tr>       <tr>           <td>10000</td>           <td>50000円以下</td>           <td>50</td>       </tr>       <tr>           <td>10000</td>           <td>300000円以下</td>           <td>100</td>       </tr>       <tr>           <td>10000</td>           <td>500000円以下</td>           <td>500</td>       </tr>       <tr>           <td>10000</td>           <td>3000000円以下</td>           <td>1000</td>       </tr>       <tr>           <td>10000</td>           <td>5000000円以下</td>           <td>5000</td>       </tr>       <tr>           <td>10000</td>           <td>30000000円以下</td>           <td>10000</td>       </tr>       <tr>           <td>10000</td>           <td>50000000円以下</td>           <td>50000</td>       </tr>       <tr>           <td>10000</td>           <td>50000000円超</td>           <td>100000</td>       </tr>       <tr>           <td>10003</td>           <td>1000円以下</td>           <td>0.1</td>       </tr>       <tr>           <td>10003</td>           <td>3000円以下</td>           <td>0.5</td>       </tr>       <tr>           <td>10003</td>           <td>10000円以下</td>           <td>1</td>       </tr>       <tr>           <td>10003</td>           <td>30000円以下</td>           <td>5</td>       </tr>       <tr>           <td>10003</td>           <td>100000円以下</td>           <td>10</td>       </tr>       <tr>           <td>10003</td>           <td>300000円以下</td>           <td>50</td>       </tr>       <tr>           <td>10003</td>           <td>1000000円以下</td>           <td>100</td>       </tr>       <tr>           <td>10003</td>           <td>3000000円以下</td>           <td>500</td>       </tr>       <tr>           <td>10003</td>           <td>10000000円以下</td>           <td>1000</td>       </tr>       <tr>           <td>10003</td>           <td>30000000円以下</td>           <td>5000</td>       </tr>       <tr>           <td>10003</td>           <td>30000000円超</td>           <td>10000</td>       </tr>       <tr>           <td>10118</td>           <td>-</td>           <td>10</td>       </tr>       <tr>           <td>10119</td>           <td>-</td>           <td>5</td>       </tr>       <tr>           <td>10318</td>           <td>100円以下</td>           <td>1</td>       </tr>       <tr>           <td>10318</td>           <td>1000円以下</td>           <td>5</td>       </tr>       <tr>           <td>10318</td>           <td>1000円超</td>           <td>10</td>       </tr>       <tr>           <td>10706</td>           <td>-</td>           <td>0.25</td>       </tr>       <tr>           <td>10718</td>           <td>-</td>           <td>0.5</td>       </tr>       <tr>           <td>12122</td>           <td>-</td>           <td>5</td>       </tr>       <tr>           <td>14473</td>           <td>-</td>           <td>1</td>       </tr>       <tr>           <td>14515</td>           <td>-</td>           <td>0.05</td>       </tr>       <tr>           <td>15411</td>           <td>-</td>           <td>1</td>       </tr>       <tr>           <td>15569</td>           <td>-</td>           <td>0.5</td>       </tr>       <tr>           <td>17163</td>           <td>-</td>           <td>0.5</td>       </tr>   </tbody> </table>", alias="PriceRangeGroup")
    kc_margin_buy: Optional[StrictBool] = Field(default=None, description="一般信用買建フラグ<br>※trueのとき、一般信用(長期)または一般信用(デイトレ)が買建可能<br>※株式銘柄の場合のみ", alias="KCMarginBuy")
    kc_margin_sell: Optional[StrictBool] = Field(default=None, description="一般信用売建フラグ<br>※trueのとき、一般信用(長期)または一般信用(デイトレ)が売建可能<br>※株式銘柄の場合のみ", alias="KCMarginSell")
    margin_buy: Optional[StrictBool] = Field(default=None, description="制度信用買建フラグ<br>※trueのとき制度信用買建可能<br>※株式銘柄の場合のみ", alias="MarginBuy")
    margin_sell: Optional[StrictBool] = Field(default=None, description="制度信用売建フラグ<br>※trueのとき制度信用売建可能<br>※株式銘柄の場合のみ", alias="MarginSell")
    upper_limit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="値幅上限<br>※株式・先物・オプション銘柄の場合のみ", alias="UpperLimit")
    lower_limit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="値幅下限<br>※株式・先物・オプション銘柄の場合のみ", alias="LowerLimit")
    underlyer: Optional[StrictStr] = Field(default=None, description="原資産コード<br>※先物・オプション銘柄の場合のみ <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>NK225</td>           <td>日経225</td>       </tr>       <tr>           <td>NK300</td>           <td>日経300</td>       </tr>       <tr>           <td>GROWTH</td>           <td>グロース250先物</td>       </tr>       <tr>           <td>JPX400</td>           <td>JPX日経400</td>       </tr>       <tr>           <td>TOPIX</td>           <td>TOPIX</td>       </tr>       <tr>           <td>NKVI</td>           <td>日経平均VI</td>       </tr>       <tr>           <td>DJIA</td>           <td>NYダウ</td>       </tr>       <tr>           <td>TSEREITINDEX</td>           <td>東証REIT指数</td>       </tr>       <tr>           <td>TOPIXCORE30</td>           <td>TOPIX Core30</td>       </tr>   </tbody> </table>", alias="Underlyer")
    deriv_month: Optional[StrictStr] = Field(default=None, description="限月-年月<br>※「限月-年月」は「年(yyyy)/月(MM)」で表示します。<br>※先物・オプション銘柄の場合のみ", alias="DerivMonth")
    trade_start: Optional[StrictInt] = Field(default=None, description="取引開始日<br>※先物・オプション銘柄の場合のみ", alias="TradeStart")
    trade_end: Optional[StrictInt] = Field(default=None, description="取引終了日<br>※先物・オプション銘柄の場合のみ", alias="TradeEnd")
    strike_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="権利行使価格<br>※オプション銘柄の場合のみ", alias="StrikePrice")
    put_or_call: Optional[StrictInt] = Field(default=None, description="プット/コール区分<br>※オプション銘柄の場合のみ <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>プット</td>       </tr>       <tr>           <td>2</td>           <td>コール</td>       </tr>   </tbody> </table>", alias="PutOrCall")
    clearing_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="清算値<br>※先物銘柄の場合のみ<br>追加情報出力フラグ：falseの場合、null", alias="ClearingPrice")
    __properties: ClassVar[List[str]] = ["Symbol", "SymbolName", "DisplayName", "Exchange", "ExchangeName", "BisCategory", "TotalMarketValue", "TotalStocks", "TradingUnit", "FiscalYearEndBasic", "PriceRangeGroup", "KCMarginBuy", "KCMarginSell", "MarginBuy", "MarginSell", "UpperLimit", "LowerLimit", "Underlyer", "DerivMonth", "TradeStart", "TradeEnd", "StrikePrice", "PutOrCall", "ClearingPrice"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SymbolSuccess from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SymbolSuccess from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Symbol": obj.get("Symbol"),
            "SymbolName": obj.get("SymbolName"),
            "DisplayName": obj.get("DisplayName"),
            "Exchange": obj.get("Exchange"),
            "ExchangeName": obj.get("ExchangeName"),
            "BisCategory": obj.get("BisCategory"),
            "TotalMarketValue": obj.get("TotalMarketValue"),
            "TotalStocks": obj.get("TotalStocks"),
            "TradingUnit": obj.get("TradingUnit"),
            "FiscalYearEndBasic": obj.get("FiscalYearEndBasic"),
            "PriceRangeGroup": obj.get("PriceRangeGroup"),
            "KCMarginBuy": obj.get("KCMarginBuy"),
            "KCMarginSell": obj.get("KCMarginSell"),
            "MarginBuy": obj.get("MarginBuy"),
            "MarginSell": obj.get("MarginSell"),
            "UpperLimit": obj.get("UpperLimit"),
            "LowerLimit": obj.get("LowerLimit"),
            "Underlyer": obj.get("Underlyer"),
            "DerivMonth": obj.get("DerivMonth"),
            "TradeStart": obj.get("TradeStart"),
            "TradeEnd": obj.get("TradeEnd"),
            "StrikePrice": obj.get("StrikePrice"),
            "PutOrCall": obj.get("PutOrCall"),
            "ClearingPrice": obj.get("ClearingPrice")
        })
        return _obj


