# coding: utf-8

"""
    kabuステーションAPI

    # 定義情報   REST APIのコード一覧、エンドポイントは下記リンク参照     - [REST APIコード一覧](../ptal/error.html)

    The version of the OpenAPI document: 1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PositionsSuccess(BaseModel):
    """
    PositionsSuccess
    """ # noqa: E501
    execution_id: Optional[StrictStr] = Field(default=None, description="約定番号<br>※現物取引では、nullが返ります。", alias="ExecutionID")
    account_type: Optional[StrictInt] = Field(default=None, description="口座種別 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>2</td>           <td>一般</td>       </tr>       <tr>           <td>4</td>           <td>特定</td>       </tr>       <tr>           <td>12</td>           <td>法人</td>       </tr>   </tbody> </table>", alias="AccountType")
    symbol: Optional[StrictStr] = Field(default=None, description="銘柄コード", alias="Symbol")
    symbol_name: Optional[StrictStr] = Field(default=None, description="銘柄名", alias="SymbolName")
    exchange: Optional[StrictInt] = Field(default=None, description="市場コード <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>東証</td>       </tr>       <tr>           <td>3</td>           <td>名証</td>       </tr>       <tr>           <td>5</td>           <td>福証</td>       </tr>       <tr>           <td>6</td>           <td>札証</td>       </tr>       <tr>           <td>2</td>           <td>日通し</td>       </tr>       <tr>           <td>23</td>           <td>日中</td>       </tr>       <tr>           <td>24</td>           <td>夜間</td>       </tr>   </tbody> </table>", alias="Exchange")
    exchange_name: Optional[StrictStr] = Field(default=None, description="市場名", alias="ExchangeName")
    security_type: Optional[StrictInt] = Field(default=None, description="銘柄種別<br>※先物・オプション銘柄の場合のみ", alias="SecurityType")
    execution_day: Optional[StrictInt] = Field(default=None, description="約定日（建玉日）<br>※信用・先物・オプションの場合のみ<br>※現物取引では、nullが返ります。", alias="ExecutionDay")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="値段", alias="Price")
    leaves_qty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="残数量（保有数量）", alias="LeavesQty")
    hold_qty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="拘束数量（返済のために拘束されている数量）", alias="HoldQty")
    side: Optional[StrictStr] = Field(default=None, description="売買区分 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>売</td>       </tr>       <tr>           <td>2</td>           <td>買</td>       </tr>   </tbody> </table>", alias="Side")
    expenses: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="諸経費<br>※信用・先物・オプションの場合のみ", alias="Expenses")
    commission: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="手数料<br>※信用・先物・オプションの場合のみ", alias="Commission")
    commission_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="手数料消費税<br>※信用・先物・オプションの場合のみ", alias="CommissionTax")
    expire_day: Optional[StrictInt] = Field(default=None, description="返済期日<br>※信用・先物・オプションの場合のみ", alias="ExpireDay")
    margin_trade_type: Optional[StrictInt] = Field(default=None, description="信用取引区分<br>※信用の場合のみ <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>制度信用</td>       </tr>       <tr>           <td>2</td>           <td>一般信用（長期）</td>       </tr>       <tr>           <td>3</td>           <td>一般信用（デイトレ）</td>       </tr>   </tbody> </table>", alias="MarginTradeType")
    current_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="現在値<br>追加情報出力フラグ：falseの場合、null", alias="CurrentPrice")
    valuation: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="評価金額<br>追加情報出力フラグ：falseの場合、null", alias="Valuation")
    profit_loss: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="評価損益額<br>追加情報出力フラグ：falseの場合、null", alias="ProfitLoss")
    profit_loss_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="評価損益率<br>追加情報出力フラグ：falseの場合、null", alias="ProfitLossRate")
    __properties: ClassVar[List[str]] = ["ExecutionID", "AccountType", "Symbol", "SymbolName", "Exchange", "ExchangeName", "SecurityType", "ExecutionDay", "Price", "LeavesQty", "HoldQty", "Side", "Expenses", "Commission", "CommissionTax", "ExpireDay", "MarginTradeType", "CurrentPrice", "Valuation", "ProfitLoss", "ProfitLossRate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PositionsSuccess from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PositionsSuccess from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ExecutionID": obj.get("ExecutionID"),
            "AccountType": obj.get("AccountType"),
            "Symbol": obj.get("Symbol"),
            "SymbolName": obj.get("SymbolName"),
            "Exchange": obj.get("Exchange"),
            "ExchangeName": obj.get("ExchangeName"),
            "SecurityType": obj.get("SecurityType"),
            "ExecutionDay": obj.get("ExecutionDay"),
            "Price": obj.get("Price"),
            "LeavesQty": obj.get("LeavesQty"),
            "HoldQty": obj.get("HoldQty"),
            "Side": obj.get("Side"),
            "Expenses": obj.get("Expenses"),
            "Commission": obj.get("Commission"),
            "CommissionTax": obj.get("CommissionTax"),
            "ExpireDay": obj.get("ExpireDay"),
            "MarginTradeType": obj.get("MarginTradeType"),
            "CurrentPrice": obj.get("CurrentPrice"),
            "Valuation": obj.get("Valuation"),
            "ProfitLoss": obj.get("ProfitLoss"),
            "ProfitLossRate": obj.get("ProfitLossRate")
        })
        return _obj


