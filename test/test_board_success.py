# coding: utf-8

"""
    kabuステーションAPI

    # 定義情報   REST APIのコード一覧、エンドポイントは下記リンク参照     - [REST APIコード一覧](../ptal/error.html)

    The version of the OpenAPI document: 1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from kabustation_client.models.board_success import BoardSuccess

class TestBoardSuccess(unittest.TestCase):
    """BoardSuccess unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BoardSuccess:
        """Test BoardSuccess
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BoardSuccess`
        """
        model = BoardSuccess()
        if include_optional:
            return BoardSuccess(
                symbol = '',
                symbol_name = '',
                exchange = 1,
                exchange_name = '',
                current_price = 1.337,
                current_price_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                current_price_change_status = '',
                current_price_status = 56,
                calc_price = 1.337,
                previous_close = 1.337,
                previous_close_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                change_previous_close = 1.337,
                change_previous_close_per = 1.337,
                opening_price = 1.337,
                opening_price_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                high_price = 1.337,
                high_price_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                low_price = 1.337,
                low_price_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                trading_volume = 1.337,
                trading_volume_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                vwap = 1.337,
                trading_value = 1.337,
                bid_qty = 1.337,
                bid_price = 1.337,
                bid_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                bid_sign = '',
                market_order_sell_qty = 1.337,
                sell1 = kabustation_client.models.board_success_sell1.BoardSuccess_Sell1(
                    time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    sign = '', 
                    price = 1.337, 
                    qty = 1.337, ),
                sell2 = kabustation_client.models.board_success_sell2.BoardSuccess_Sell2(
                    price = 1.337, 
                    qty = 1.337, ),
                sell3 = kabustation_client.models.board_success_sell3.BoardSuccess_Sell3(
                    price = 1.337, 
                    qty = 1.337, ),
                sell4 = kabustation_client.models.board_success_sell4.BoardSuccess_Sell4(
                    price = 1.337, 
                    qty = 1.337, ),
                sell5 = kabustation_client.models.board_success_sell5.BoardSuccess_Sell5(
                    price = 1.337, 
                    qty = 1.337, ),
                sell6 = kabustation_client.models.board_success_sell6.BoardSuccess_Sell6(
                    price = 1.337, 
                    qty = 1.337, ),
                sell7 = kabustation_client.models.board_success_sell7.BoardSuccess_Sell7(
                    price = 1.337, 
                    qty = 1.337, ),
                sell8 = kabustation_client.models.board_success_sell8.BoardSuccess_Sell8(
                    price = 1.337, 
                    qty = 1.337, ),
                sell9 = kabustation_client.models.board_success_sell9.BoardSuccess_Sell9(
                    price = 1.337, 
                    qty = 1.337, ),
                sell10 = kabustation_client.models.board_success_sell10.BoardSuccess_Sell10(
                    price = 1.337, 
                    qty = 1.337, ),
                ask_qty = 1.337,
                ask_price = 1.337,
                ask_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                ask_sign = '',
                market_order_buy_qty = 1.337,
                buy1 = kabustation_client.models.board_success_buy1.BoardSuccess_Buy1(
                    time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    sign = '', 
                    price = 1.337, 
                    qty = 1.337, ),
                buy2 = kabustation_client.models.board_success_buy2.BoardSuccess_Buy2(
                    price = 1.337, 
                    qty = 1.337, ),
                buy3 = kabustation_client.models.board_success_buy3.BoardSuccess_Buy3(
                    price = 1.337, 
                    qty = 1.337, ),
                buy4 = kabustation_client.models.board_success_buy4.BoardSuccess_Buy4(
                    price = 1.337, 
                    qty = 1.337, ),
                buy5 = kabustation_client.models.board_success_buy5.BoardSuccess_Buy5(
                    price = 1.337, 
                    qty = 1.337, ),
                buy6 = kabustation_client.models.board_success_buy6.BoardSuccess_Buy6(
                    price = 1.337, 
                    qty = 1.337, ),
                buy7 = kabustation_client.models.board_success_buy7.BoardSuccess_Buy7(
                    price = 1.337, 
                    qty = 1.337, ),
                buy8 = kabustation_client.models.board_success_buy8.BoardSuccess_Buy8(
                    price = 1.337, 
                    qty = 1.337, ),
                buy9 = kabustation_client.models.board_success_buy9.BoardSuccess_Buy9(
                    price = 1.337, 
                    qty = 1.337, ),
                buy10 = kabustation_client.models.board_success_buy10.BoardSuccess_Buy10(
                    price = 1.337, 
                    qty = 1.337, ),
                over_sell_qty = 1.337,
                under_buy_qty = 1.337,
                total_market_value = 1.337,
                clearing_price = 1.337,
                iv = 1.337,
                gamma = 1.337,
                theta = 1.337,
                vega = 1.337,
                delta = 1.337,
                security_type = 56
            )
        else:
            return BoardSuccess(
        )
        """

    def testBoardSuccess(self):
        """Test BoardSuccess"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
